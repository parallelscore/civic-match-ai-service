name: Dev CICD

on:
  workflow_dispatch:

  push:
    branches:
      - 'dev'

  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - 'dev'

env:
  ENV: dev

jobs:

  build-docker-image:
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.vars.outputs.image-tag }}

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build (but not push) Docker image
        id: vars
        uses: docker/build-push-action@v4
        with:
          push: false
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:dev
          load: true
          build-args: |
            POSTGRESQL_DATABASE_URL=${{ secrets.DEV_POSTGRESQL_DATABASE_URL }}
            BACKEND_API_URL=${{ secrets.DEV_BACKEND_API_URL }}
            USE_MOCK_BACKEND_API_URL=${{ secrets.USE_MOCK_BACKEND_API_URL }}
            MOCK_BACKEND_API_URL=${{ secrets.MOCK_BACKEND_API_URL }}

      - name: Save image tag
        run: echo "::set-output name=image-tag::${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:dev"

  #  check-code-quality:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v2
  #        with:
  #          fetch-depth: 0
  #
  #      - name: Set up Python 3.9
  #        uses: actions/setup-python@v2
  #        with:
  #          python-version: '3.9'
  #
  #      - name: Install requirements and dependencies
  #        run: |
  #          pip install -r requirements.txt
  #          pip install coverage
  #
  #      - name: Run tests and generate coverage report
  #        run: |
  #          coverage run --source=. -m pytest tests/ -vv
  #          coverage xml -i
  #        env:
  #          POSTGRESQL_DATABASE_URL: ${{ secrets.DEV_POSTGRESQL_DATABASE_URL }}
  #
  #      - uses: sonarsource/sonarqube-scan-action@master
  #        env:
  #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #
  #      - uses: sonarsource/sonarqube-quality-gate-action@master
  #        timeout-minutes: 5
  #        env:
  #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  push-docker-image:
    needs: [ build-docker-image ]
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}:dev
          build-args: |
            POSTGRESQL_DATABASE_URL=${{ secrets.DEV_POSTGRESQL_DATABASE_URL }}
            BACKEND_API_URL=${{ secrets.DEV_BACKEND_API_URL }}
            USE_MOCK_BACKEND_API_URL=${{ secrets.USE_MOCK_BACKEND_API_URL }}
            MOCK_BACKEND_API_URL=${{ secrets.MOCK_BACKEND_API_URL }}

  deploy-to-kubernetes:
    needs: push-docker-image
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install and configure kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          echo "${{ secrets.ELECTED_K8_KUBECONFIG }}" | base64 --decode > kubeconfig.yaml

      - name: Deploy to Kubernetes
        run: |
          KUBECONFIG=kubeconfig.yaml kubectl rollout restart deployment/${{ secrets.DEV_DEPLOYMENT_NAME }} -n ${{ secrets.DEV_NAMESPACE }}
